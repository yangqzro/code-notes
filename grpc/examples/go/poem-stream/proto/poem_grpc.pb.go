// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: poem.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PoemService_GetPoem_FullMethodName               = "/PoemService/GetPoem"
	PoemService_GetPoemStream_FullMethodName         = "/PoemService/GetPoemStream"
	PoemService_GetPoemAll_FullMethodName            = "/PoemService/GetPoemAll"
	PoemService_GetPoemAllStream_FullMethodName      = "/PoemService/GetPoemAllStream"
	PoemService_UploadPoem_FullMethodName            = "/PoemService/UploadPoem"
	PoemService_UploadPoemStream_FullMethodName      = "/PoemService/UploadPoemStream"
	PoemService_BatchUploadPoem_FullMethodName       = "/PoemService/BatchUploadPoem"
	PoemService_BatchUploadPoemStream_FullMethodName = "/PoemService/BatchUploadPoemStream"
)

// PoemServiceClient is the client API for PoemService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PoemServiceClient interface {
	GetPoem(ctx context.Context, in *GetPoemRequest, opts ...grpc.CallOption) (*Poem, error)
	GetPoemStream(ctx context.Context, in *GetPoemRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamPoem], error)
	GetPoemAll(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*PoemCollection, error)
	GetPoemAllStream(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Poem], error)
	UploadPoem(ctx context.Context, in *Poem, opts ...grpc.CallOption) (*UploadPoemResponse, error)
	UploadPoemStream(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[StreamPoem, UploadPoemResponse], error)
	BatchUploadPoem(ctx context.Context, in *PoemCollection, opts ...grpc.CallOption) (*UploadPoemResponse, error)
	BatchUploadPoemStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[Poem, UploadPoemResponse], error)
}

type poemServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPoemServiceClient(cc grpc.ClientConnInterface) PoemServiceClient {
	return &poemServiceClient{cc}
}

func (c *poemServiceClient) GetPoem(ctx context.Context, in *GetPoemRequest, opts ...grpc.CallOption) (*Poem, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Poem)
	err := c.cc.Invoke(ctx, PoemService_GetPoem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *poemServiceClient) GetPoemStream(ctx context.Context, in *GetPoemRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamPoem], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &PoemService_ServiceDesc.Streams[0], PoemService_GetPoemStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetPoemRequest, StreamPoem]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PoemService_GetPoemStreamClient = grpc.ServerStreamingClient[StreamPoem]

func (c *poemServiceClient) GetPoemAll(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*PoemCollection, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PoemCollection)
	err := c.cc.Invoke(ctx, PoemService_GetPoemAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *poemServiceClient) GetPoemAllStream(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Poem], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &PoemService_ServiceDesc.Streams[1], PoemService_GetPoemAllStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[emptypb.Empty, Poem]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PoemService_GetPoemAllStreamClient = grpc.ServerStreamingClient[Poem]

func (c *poemServiceClient) UploadPoem(ctx context.Context, in *Poem, opts ...grpc.CallOption) (*UploadPoemResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UploadPoemResponse)
	err := c.cc.Invoke(ctx, PoemService_UploadPoem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *poemServiceClient) UploadPoemStream(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[StreamPoem, UploadPoemResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &PoemService_ServiceDesc.Streams[2], PoemService_UploadPoemStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamPoem, UploadPoemResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PoemService_UploadPoemStreamClient = grpc.ClientStreamingClient[StreamPoem, UploadPoemResponse]

func (c *poemServiceClient) BatchUploadPoem(ctx context.Context, in *PoemCollection, opts ...grpc.CallOption) (*UploadPoemResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UploadPoemResponse)
	err := c.cc.Invoke(ctx, PoemService_BatchUploadPoem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *poemServiceClient) BatchUploadPoemStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[Poem, UploadPoemResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &PoemService_ServiceDesc.Streams[3], PoemService_BatchUploadPoemStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Poem, UploadPoemResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PoemService_BatchUploadPoemStreamClient = grpc.BidiStreamingClient[Poem, UploadPoemResponse]

// PoemServiceServer is the server API for PoemService service.
// All implementations must embed UnimplementedPoemServiceServer
// for forward compatibility.
type PoemServiceServer interface {
	GetPoem(context.Context, *GetPoemRequest) (*Poem, error)
	GetPoemStream(*GetPoemRequest, grpc.ServerStreamingServer[StreamPoem]) error
	GetPoemAll(context.Context, *emptypb.Empty) (*PoemCollection, error)
	GetPoemAllStream(*emptypb.Empty, grpc.ServerStreamingServer[Poem]) error
	UploadPoem(context.Context, *Poem) (*UploadPoemResponse, error)
	UploadPoemStream(grpc.ClientStreamingServer[StreamPoem, UploadPoemResponse]) error
	BatchUploadPoem(context.Context, *PoemCollection) (*UploadPoemResponse, error)
	BatchUploadPoemStream(grpc.BidiStreamingServer[Poem, UploadPoemResponse]) error
	mustEmbedUnimplementedPoemServiceServer()
}

// UnimplementedPoemServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPoemServiceServer struct{}

func (UnimplementedPoemServiceServer) GetPoem(context.Context, *GetPoemRequest) (*Poem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPoem not implemented")
}
func (UnimplementedPoemServiceServer) GetPoemStream(*GetPoemRequest, grpc.ServerStreamingServer[StreamPoem]) error {
	return status.Errorf(codes.Unimplemented, "method GetPoemStream not implemented")
}
func (UnimplementedPoemServiceServer) GetPoemAll(context.Context, *emptypb.Empty) (*PoemCollection, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPoemAll not implemented")
}
func (UnimplementedPoemServiceServer) GetPoemAllStream(*emptypb.Empty, grpc.ServerStreamingServer[Poem]) error {
	return status.Errorf(codes.Unimplemented, "method GetPoemAllStream not implemented")
}
func (UnimplementedPoemServiceServer) UploadPoem(context.Context, *Poem) (*UploadPoemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadPoem not implemented")
}
func (UnimplementedPoemServiceServer) UploadPoemStream(grpc.ClientStreamingServer[StreamPoem, UploadPoemResponse]) error {
	return status.Errorf(codes.Unimplemented, "method UploadPoemStream not implemented")
}
func (UnimplementedPoemServiceServer) BatchUploadPoem(context.Context, *PoemCollection) (*UploadPoemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchUploadPoem not implemented")
}
func (UnimplementedPoemServiceServer) BatchUploadPoemStream(grpc.BidiStreamingServer[Poem, UploadPoemResponse]) error {
	return status.Errorf(codes.Unimplemented, "method BatchUploadPoemStream not implemented")
}
func (UnimplementedPoemServiceServer) mustEmbedUnimplementedPoemServiceServer() {}
func (UnimplementedPoemServiceServer) testEmbeddedByValue()                     {}

// UnsafePoemServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PoemServiceServer will
// result in compilation errors.
type UnsafePoemServiceServer interface {
	mustEmbedUnimplementedPoemServiceServer()
}

func RegisterPoemServiceServer(s grpc.ServiceRegistrar, srv PoemServiceServer) {
	// If the following call pancis, it indicates UnimplementedPoemServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PoemService_ServiceDesc, srv)
}

func _PoemService_GetPoem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPoemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoemServiceServer).GetPoem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PoemService_GetPoem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoemServiceServer).GetPoem(ctx, req.(*GetPoemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PoemService_GetPoemStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetPoemRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PoemServiceServer).GetPoemStream(m, &grpc.GenericServerStream[GetPoemRequest, StreamPoem]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PoemService_GetPoemStreamServer = grpc.ServerStreamingServer[StreamPoem]

func _PoemService_GetPoemAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoemServiceServer).GetPoemAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PoemService_GetPoemAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoemServiceServer).GetPoemAll(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PoemService_GetPoemAllStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PoemServiceServer).GetPoemAllStream(m, &grpc.GenericServerStream[emptypb.Empty, Poem]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PoemService_GetPoemAllStreamServer = grpc.ServerStreamingServer[Poem]

func _PoemService_UploadPoem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Poem)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoemServiceServer).UploadPoem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PoemService_UploadPoem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoemServiceServer).UploadPoem(ctx, req.(*Poem))
	}
	return interceptor(ctx, in, info, handler)
}

func _PoemService_UploadPoemStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PoemServiceServer).UploadPoemStream(&grpc.GenericServerStream[StreamPoem, UploadPoemResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PoemService_UploadPoemStreamServer = grpc.ClientStreamingServer[StreamPoem, UploadPoemResponse]

func _PoemService_BatchUploadPoem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PoemCollection)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoemServiceServer).BatchUploadPoem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PoemService_BatchUploadPoem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoemServiceServer).BatchUploadPoem(ctx, req.(*PoemCollection))
	}
	return interceptor(ctx, in, info, handler)
}

func _PoemService_BatchUploadPoemStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PoemServiceServer).BatchUploadPoemStream(&grpc.GenericServerStream[Poem, UploadPoemResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PoemService_BatchUploadPoemStreamServer = grpc.BidiStreamingServer[Poem, UploadPoemResponse]

// PoemService_ServiceDesc is the grpc.ServiceDesc for PoemService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PoemService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "PoemService",
	HandlerType: (*PoemServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPoem",
			Handler:    _PoemService_GetPoem_Handler,
		},
		{
			MethodName: "GetPoemAll",
			Handler:    _PoemService_GetPoemAll_Handler,
		},
		{
			MethodName: "UploadPoem",
			Handler:    _PoemService_UploadPoem_Handler,
		},
		{
			MethodName: "BatchUploadPoem",
			Handler:    _PoemService_BatchUploadPoem_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetPoemStream",
			Handler:       _PoemService_GetPoemStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetPoemAllStream",
			Handler:       _PoemService_GetPoemAllStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "UploadPoemStream",
			Handler:       _PoemService_UploadPoemStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "BatchUploadPoemStream",
			Handler:       _PoemService_BatchUploadPoemStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "poem.proto",
}
